using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Net.Http;
using System.Threading.Tasks;

namespace HagSoftware
{
    public partial class Dashboard : Window
    {
        private string apiKey = "ea40d7ee5721d9db36bb7d92edf90e7b";
        private readonly WeatherViewModel viewModel;

        public Dashboard()
        {
            InitializeComponent();
            viewModel = new WeatherViewModel();
            DataContext = viewModel;
        }

        private async void GetWeatherButton_Click(object sender, RoutedEventArgs e)
        {
            string location = LocationTextBox.Text;

            // API endpoint URL with your API key
            string apiUrl = $"https://api.openweathermap.org/data/2.5/weather?q={location}&appid=a4c5fa0aea885e9ddd149fb3e7bc3b40&units=metric";

            // Create an HttpClient object to send the request
            using var httpClient = new HttpClient();

            try
            {
                // Send the GET request to the API endpoint
                HttpResponseMessage response = await httpClient.GetAsync(apiUrl);

                // If the response is successful
                if (response.IsSuccessStatusCode)
                {
                    // Parse the response content as JSON
                    string json = await response.Content.ReadAsStringAsync();

                    // Extract the temperature, humidity, and wind speed from the JSON
                    dynamic data = Newtonsoft.Json.JsonConvert.DeserializeObject(json);
                    double temperature = data.main.temp;
                    int humidity = data.main.humidity;
                    double windSpeed = data.wind.speed;


                    // Update the labels with the values
                    TemperatureLabel.Content = $"Temperature: {temperature} C";
                    HumidityLabel.Content = $"Humidity: {humidity}%";
                    WindSpeedLabel.Content = $"Wind speed: {windSpeed} m/s";

                }
                else
                {
                    MessageBox.Show($"Error: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }
        }

        private void Btn_Advice_Click(object sender, RoutedEventArgs e)
        {
            Advice win2 = new Advice();
            win2.Show();
            this.Close();

        }

    }


}

<Label x:Name="TemperatureLabel" Content="{Binding Temperature}" Margin="5"/>
                        </StackPanel>
                        <StackPanel Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="3" Orientation="Horizontal">
                            <Label Content="Humidity:" Margin="5"/>
                            <Label x:Name="HumidityLabel" Content="{Binding Humidity}" Margin="5"/>
                        </StackPanel>
                        <StackPanel Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="3" Orientation="Horizontal">
                            <Label Content="Wind speed:" Margin="5"/>
                            <Label x:Name="WindSpeedLabel" Content="{Binding WindSpeed}" Margin="5"/>
